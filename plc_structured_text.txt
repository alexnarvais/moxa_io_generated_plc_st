/////////////////////////////////////////////////////////////////////
// Moxa Digital Inputs and Outputs E1212
// Rack 1 Slot 0
// This code was generated by python. Please make corrections in the csv file, rerun the code and re-paste
// Get the module status
GSV(Module, r01s00_moxa_e1212, EntryStatus, r01s00_module_status);
// Get 4 bits from 12 - 15 and put into separate DINT
r01s00_btdt_1.Source := r01s00_module_status;
r01s00_btdt_1.SourceBit := 12;
r01s00_btdt_1.Length := 4;
r01s00_btdt_1.DestBit := 0;
r01s00_btdt_1.Target := zero;
BTDT(r01s00_btdt_1);
r01s00_module_status_easy := r01s00_btdt_1.Dest;

// If this is the first time the DINT is equal to something other than 4, see why
r01s00_osri_1.InputBit := (r01s00_module_status_easy <> 4);
OSRI(r01s00_osri_1);
if r01s00_osri_1.OutputBit then
   GSV(Module, r01s00_moxa_e1212, FaultCode, r01s00_fault_code);
   GSV(Module, r01s00_moxa_e1212, FaultInfo, r01s00_fault_info);
end_if;

// The connection is good, if the module states is equal to 4
r01s00_connection_error := (r01s00_module_status_easy <> 4);

// Set the av program input for the fault code
AOI_AV(aoi_r01s00_comm_fault_code, av_r01s00_comm_fault_code);
av_r01s00_comm_fault_code.Program_Input := r01s00_fault_code;

// Set the av program input for the fault info
AOI_AV(aoi_r01s00_comm_fault_info, av_r01s00_comm_fault_info);
av_r01s00_comm_fault_info.Program_Input := r01s00_fault_info;

// Set the comm status dv
AOI_DV(aoi_r01s00_comm_status, dv_r01s00_comm_status);
dv_r01s00_comm_status.Program_Input := NOT r01s00_connection_error AND NOT r01s00_moxa_e1212:I.ConnectionFaulted;

// Channel 0 - input - di_low_static_pres
// Process the AOI
AOI_DI(aoi_r01s00c00, di_low_static_pres);
// Set the program input of the UDT
di_low_static_pres.Program_Input := r01s00_moxa_e1212:I.Data[0].0;
// Set the channel in manual bit in the manual DINT
r01s00_manual.0 := di_low_static_pres.Manual;

// Channel 1 - input - di_fire_alarm_norm
// Process the AOI
AOI_DI(aoi_r01s00c01, di_fire_alarm_norm);
// Set the program input of the UDT
di_fire_alarm_norm.Program_Input := r01s00_moxa_e1212:I.Data[0].1;
// Set the channel in manual bit in the manual DINT
r01s00_manual.1 := di_fire_alarm_norm.Manual;

// Channel 2 - input - di_sfty_rly_sts
// Process the AOI
AOI_DI(aoi_r01s00c02, di_sfty_rly_sts);
// Set the program input of the UDT
di_sfty_rly_sts.Program_Input := r01s00_moxa_e1212:I.Data[0].2;
// Set the channel in manual bit in the manual DINT
r01s00_manual.2 := di_sfty_rly_sts.Manual;

// Channel 3 - input - di_sfty_rst_pb_sts
// Process the AOI
AOI_DI(aoi_r01s00c03, di_sfty_rst_pb_sts);
// Set the program input of the UDT
di_sfty_rst_pb_sts.Program_Input := r01s00_moxa_e1212:I.Data[0].3;
// Set the channel in manual bit in the manual DINT
r01s00_manual.3 := di_sfty_rst_pb_sts.Manual;

// Channel 4 - input - di_pwr_sply_sts
// Process the AOI
AOI_DI(aoi_r01s00c04, di_pwr_sply_sts);
// Set the program input of the UDT
di_pwr_sply_sts.Program_Input := r01s00_moxa_e1212:I.Data[0].4;
// Set the channel in manual bit in the manual DINT
r01s00_manual.4 := di_pwr_sply_sts.Manual;

// Channel 5 - input - di_ra_end_sw
// Process the AOI
AOI_DI(aoi_r01s00c05, di_ra_end_sw);
// Set the program input of the UDT
di_ra_end_sw.Program_Input := r01s00_moxa_e1212:I.Data[0].5;
// Set the channel in manual bit in the manual DINT
r01s00_manual.5 := di_ra_end_sw.Manual;

// Channel 6 - input - di_oa_end_sw
// Process the AOI
AOI_DI(aoi_r01s00c06, di_oa_end_sw);
// Set the program input of the UDT
di_oa_end_sw.Program_Input := r01s00_moxa_e1212:I.Data[0].6;
// Set the channel in manual bit in the manual DINT
r01s00_manual.6 := di_oa_end_sw.Manual;

// Channel 7 - input - di_carbon_wtr_mtr
// Process the AOI
AOI_DI(aoi_r01s00c07, di_carbon_wtr_mtr);
// Set the program input of the UDT
di_carbon_wtr_mtr.Program_Input := r01s00_moxa_e1212:I.Data[0].7;
// Set the channel in manual bit in the manual DINT
r01s00_manual.7 := di_carbon_wtr_mtr.Manual;

// Channel 8 - Spare

// Channel 9 - Spare

// Channel 10 - output - do_sfty_rst_pb_rly
// Process the AOI
AOI_DO(aoi_r01s00c10, r01s00c10, do_sfty_rst_pb_rly);
// set the output value from the intermediate BOOL
r01s00_moxa_e1212:O.Data[0].2 := r01s00c10;

// Channel 11 - output - do_sfty_rst_pb_lt
// Process the AOI
AOI_DO(aoi_r01s00c11, r01s00c11, do_sfty_rst_pb_lt);
// set the output value from the intermediate BOOL
r01s00_moxa_e1212:O.Data[0].3 := r01s00c11;

// Channel 12 - Spare

// Channel 13 - Spare

// Channel 14 - Spare

// Channel 15 - Spare

/////////////////////////////////////////////////////////////////////
// Moxa RTD Analog Inputs E1260
// Rack 2 Slot 0
// This code was generated by python. Please make corrections in the csv file, rerun the code and re-paste
// Get the module status
GSV(Module, r02s00_moxa_e1260, EntryStatus, r02s00_module_status);
// Get 4 bits from 12 - 15 and put into separate DINT
r02s00_btdt_1.Source := r02s00_module_status;
r02s00_btdt_1.SourceBit := 12;
r02s00_btdt_1.Length := 4;
r02s00_btdt_1.DestBit := 0;
r02s00_btdt_1.Target := zero;
BTDT(r02s00_btdt_1);
r02s00_module_status_easy := r02s00_btdt_1.Dest;

// If this is the first time the DINT is equal to something other than 4, see why
r02s00_osri_1.InputBit := (r02s00_module_status_easy <> 4);
OSRI(r02s00_osri_1);
if r02s00_osri_1.OutputBit then
   GSV(Module, r02s00_moxa_e1260, FaultCode, r02s00_fault_code);
   GSV(Module, r02s00_moxa_e1260, FaultInfo, r02s00_fault_info);
end_if;

// The connection is good, if the module states is equal to 4
r02s00_connection_error := (r02s00_module_status_easy <> 4);

// Set the av program input for the fault code
AOI_AV(aoi_r02s00_comm_fault_code, av_r02s00_comm_fault_code);
av_r02s00_comm_fault_code.Program_Input := r02s00_fault_code;

// Set the av program input for the fault info
AOI_AV(aoi_r02s00_comm_fault_info, av_r02s00_comm_fault_info);
av_r02s00_comm_fault_info.Program_Input := r02s00_fault_info;

// Set the comm status dv
AOI_DV(aoi_r02s00_comm_status, dv_r02s00_comm_status);
dv_r02s00_comm_status.Program_Input := NOT r02s00_connection_error AND NOT r02s00_moxa_e1260:I.ConnectionFaulted;

// Clear the unused bits in the unreliable DINT
r02s00_btdt_2.Source := zero;
r02s00_btdt_2.SourceBit := 0;
r02s00_btdt_2.Length := 24;
r02s00_btdt_2.DestBit := 8;
r02s00_btdt_2.Target := r02s00_unreliable;
BTDT(r02s00_btdt_2);
r02s00_unreliable := r02s00_btdt_2.Dest;

// Clear the unused bits in the manual DINT
r02s00_btdt_3.Source := zero;
r02s00_btdt_3.SourceBit := 0;
r02s00_btdt_3.Length := 24;
r02s00_btdt_3.DestBit := 8;
r02s00_btdt_3.Target := r02s00_manual;
BTDT(r02s00_btdt_3);
r02s00_manual := r02s00_btdt_3.Dest;

// The raw low and high for an analog input/output is based on a 0-20ma signal.
/*
   The low and high for an rtd will be based on the raw side which comes in one decimal to the
   right to large. If for example a value above 150 or below -5 deg F should cause a fault, then on the raw side
   you would set the [tag].Fault.Program_Input_Hi = 1500 and [tag].Fault.Program_Input_Lo = -50
*/
// ---------------------------------
// | Signal        | High  | Low   |
// | ------------- |-------|-------|
// | Analog Input  | 65534 | 9830  |
// | Analog Output | 4095  | 615   |
// | RTD example   | 1500  | -50   |
// ---------------------------------

// Channel 0 - ai_ra_temp
r02s00c00 := r02s00_moxa_e1260:I.Data[0];
// Process the AOI
AOI_AI(aoi_r02s00c00, r02s00c00, ai_ra_temp);
// Set the channel min/max raw and engineering scaling.
ai_ra_temp.Scale.RawMax := 100;
ai_ra_temp.Scale.RawMin := 0;
ai_ra_temp.Scale.EUMax := 10;
ai_ra_temp.Scale.EUMin := 0;
ai_ra_temp.Scale.Scale_Input_Using_Counts := 1;
// Set the channel fault limits and the bit in the unreliable DINT
ai_ra_temp.Fault.Program_Input_Hi := 65534;
ai_ra_temp.Fault.Program_Input_Lo := 9830;
r02s00_unreliable.0 := ai_ra_temp.Fault.Fault;
// Set the channel in manual bit in the manual DINT
r02s00_manual.0 := ai_ra_temp.Manual;

// Channel 1 - ai_pre_clg_temp
r02s00c01 := r02s00_moxa_e1260:I.Data[1];
// Process the AOI
AOI_AI(aoi_r02s00c01, r02s00c01, ai_pre_clg_temp);
// Set the channel min/max raw and engineering scaling.
ai_pre_clg_temp.Scale.RawMax := 100;
ai_pre_clg_temp.Scale.RawMin := 0;
ai_pre_clg_temp.Scale.EUMax := 10;
ai_pre_clg_temp.Scale.EUMin := 0;
ai_pre_clg_temp.Scale.Scale_Input_Using_Counts := 1;
// Set the channel fault limits and the bit in the unreliable DINT
ai_pre_clg_temp.Fault.Program_Input_Hi := 65534;
ai_pre_clg_temp.Fault.Program_Input_Lo := 9830;
r02s00_unreliable.1 := ai_pre_clg_temp.Fault.Fault;
// Set the channel in manual bit in the manual DINT
r02s00_manual.1 := ai_pre_clg_temp.Manual;

// Channel 2 - ai_sa_temp
r02s00c02 := r02s00_moxa_e1260:I.Data[2];
// Process the AOI
AOI_AI(aoi_r02s00c02, r02s00c02, ai_sa_temp);
// Set the channel min/max raw and engineering scaling.
ai_sa_temp.Scale.RawMax := 100;
ai_sa_temp.Scale.RawMin := 0;
ai_sa_temp.Scale.EUMax := 10;
ai_sa_temp.Scale.EUMin := 0;
ai_sa_temp.Scale.Scale_Input_Using_Counts := 1;
// Set the channel fault limits and the bit in the unreliable DINT
ai_sa_temp.Fault.Program_Input_Hi := 65534;
ai_sa_temp.Fault.Program_Input_Lo := 9830;
r02s00_unreliable.2 := ai_sa_temp.Fault.Fault;
// Set the channel in manual bit in the manual DINT
r02s00_manual.2 := ai_sa_temp.Manual;

// Channel 3 - Spare
// Ensure fault bit is not set
r02s00_unreliable.3 := 0;
// Ensure manual bit is not set
r02s00_manual.3 := 0;

// Channel 4 - Spare
// Ensure fault bit is not set
r02s00_unreliable.4 := 0;
// Ensure manual bit is not set
r02s00_manual.4 := 0;

// Channel 5 - Spare
// Ensure fault bit is not set
r02s00_unreliable.5 := 0;
// Ensure manual bit is not set
r02s00_manual.5 := 0;

/////////////////////////////////////////////////////////////////////
// Moxa Analog Inputs E1240
// Rack 3 Slot 0
// This code was generated by python. Please make corrections in the csv file, rerun the code and re-paste
// Get the module status
GSV(Module, r03s00_moxa_e1240, EntryStatus, r03s00_module_status);
// Get 4 bits from 12 - 15 and put into separate DINT
r03s00_btdt_1.Source := r03s00_module_status;
r03s00_btdt_1.SourceBit := 12;
r03s00_btdt_1.Length := 4;
r03s00_btdt_1.DestBit := 0;
r03s00_btdt_1.Target := zero;
BTDT(r03s00_btdt_1);
r03s00_module_status_easy := r03s00_btdt_1.Dest;

// If this is the first time the DINT is equal to something other than 4, see why
r03s00_osri_1.InputBit := (r03s00_module_status_easy <> 4);
OSRI(r03s00_osri_1);
if r03s00_osri_1.OutputBit then
   GSV(Module, r03s00_moxa_e1240, FaultCode, r03s00_fault_code);
   GSV(Module, r03s00_moxa_e1240, FaultInfo, r03s00_fault_info);
end_if;

// The connection is good, if the module states is equal to 4
r03s00_connection_error := (r03s00_module_status_easy <> 4);

// Set the av program input for the fault code
AOI_AV(aoi_r03s00_comm_fault_code, av_r03s00_comm_fault_code);
av_r03s00_comm_fault_code.Program_Input := r03s00_fault_code;

// Set the av program input for the fault info
AOI_AV(aoi_r03s00_comm_fault_info, av_r03s00_comm_fault_info);
av_r03s00_comm_fault_info.Program_Input := r03s00_fault_info;

// Set the comm status dv
AOI_DV(aoi_r03s00_comm_status, dv_r03s00_comm_status);
dv_r03s00_comm_status.Program_Input := NOT r03s00_connection_error AND NOT r03s00_moxa_e1240:I.ConnectionFaulted;

// Clear the unused bits in the unreliable DINT
r03s00_btdt_2.Source := zero;
r03s00_btdt_2.SourceBit := 0;
r03s00_btdt_2.Length := 24;
r03s00_btdt_2.DestBit := 8;
r03s00_btdt_2.Target := r03s00_unreliable;
BTDT(r03s00_btdt_2);
r03s00_unreliable := r03s00_btdt_2.Dest;

// Clear the unused bits in the manual DINT
r03s00_btdt_3.Source := zero;
r03s00_btdt_3.SourceBit := 0;
r03s00_btdt_3.Length := 24;
r03s00_btdt_3.DestBit := 8;
r03s00_btdt_3.Target := r03s00_manual;
BTDT(r03s00_btdt_3);
r03s00_manual := r03s00_btdt_3.Dest;

// The raw low and high for an analog input/output is based on a 0-20ma signal.
/*
   The low and high for an rtd will be based on the raw side which comes in one decimal to the
   right to large. If for example a value above 150 or below -5 deg F should cause a fault, then on the raw side
   you would set the [tag].Fault.Program_Input_Hi = 1500 and [tag].Fault.Program_Input_Lo = -50
*/
// ---------------------------------
// | Signal        | High  | Low   |
// | ------------- |-------|-------|
// | Analog Input  | 65534 | 9830  |
// | Analog Output | 4095  | 615   |
// | RTD example   | 1500  | -50   |
// ---------------------------------

// Channel 0 - ai_chwv_fdbk
// Copy the bits from the input INT to an intermediate DINT to account for Unsigned INT which AB does not do
r03s00_btdt_c00.Source := r03s00_moxa_e1240:I.Data[0];
r03s00_btdt_c00.SourceBit := 0;
r03s00_btdt_c00.Length := 16; 
r03s00_btdt_c00.DestBit := 0;
r03s00_btdt_c00.Target := zero;
BTDT(r03s00_btdt_c00);
r03s00c00 := r03s00_btdt_c00.Dest;
// Process the AOI
AOI_AI(aoi_r03s00c00, r03s00c00, ai_chwv_fdbk);
// Set the channel min/max raw and engineering scaling.
ai_chwv_fdbk.Scale.RawMax := 65534;
ai_chwv_fdbk.Scale.RawMin := 13107;
ai_chwv_fdbk.Scale.EUMax := 100;
ai_chwv_fdbk.Scale.EUMin := 0;
ai_chwv_fdbk.Scale.Scale_Input_Using_Counts := 1;
// Set the channel fault limits and the bit in the unreliable DINT
ai_chwv_fdbk.Fault.Program_Input_Hi := 65534;
ai_chwv_fdbk.Fault.Program_Input_Lo := 9830;
r03s00_unreliable.0 := ai_chwv_fdbk.Fault.Fault;
// Set the channel in manual bit in the manual DINT
r03s00_manual.0 := ai_chwv_fdbk.Manual;

// Channel 1 - Spare
// Ensure fault bit is not set
r03s00_unreliable.1 := 0;
// Ensure manual bit is not set
r03s00_manual.1 := 0;

// Channel 2 - Spare
// Ensure fault bit is not set
r03s00_unreliable.2 := 0;
// Ensure manual bit is not set
r03s00_manual.2 := 0;

// Channel 3 - Spare
// Ensure fault bit is not set
r03s00_unreliable.3 := 0;
// Ensure manual bit is not set
r03s00_manual.3 := 0;

// Channel 4 - Spare
// Ensure fault bit is not set
r03s00_unreliable.4 := 0;
// Ensure manual bit is not set
r03s00_manual.4 := 0;

// Channel 5 - Spare
// Ensure fault bit is not set
r03s00_unreliable.5 := 0;
// Ensure manual bit is not set
r03s00_manual.5 := 0;

// Channel 6 - Spare
// Ensure fault bit is not set
r03s00_unreliable.6 := 0;
// Ensure manual bit is not set
r03s00_manual.6 := 0;

// Channel 7 - Spare
// Ensure fault bit is not set
r03s00_unreliable.7 := 0;
// Ensure manual bit is not set
r03s00_manual.7 := 0;

/////////////////////////////////////////////////////////////////////
// Moxa Digital Inputs and Outputs E1241
// Rack 4 Slot 0
// This code was generated by python. Please make corrections in the csv file, rerun the code and re-paste
// Get the module status
GSV(Module, r04s00_moxa_e1241, EntryStatus, r04s00_module_status);
// Get 4 bits from 12 - 15 and put into separate DINT
r04s00_btdt_1.Source := r04s00_module_status;
r04s00_btdt_1.SourceBit := 12;
r04s00_btdt_1.Length := 4;
r04s00_btdt_1.DestBit := 0;
r04s00_btdt_1.Target := zero;
BTDT(r04s00_btdt_1);
r04s00_module_status_easy := r04s00_btdt_1.Dest;

// If this is the first time the DINT is equal to something other than 4, see why
r04s00_osri_1.InputBit := (r04s00_module_status_easy <> 4);
OSRI(r04s00_osri_1);
if r04s00_osri_1.OutputBit then
   GSV(Module, r04s00_moxa_e1241, FaultCode, r04s00_fault_code);
   GSV(Module, r04s00_moxa_e1241, FaultInfo, r04s00_fault_info);
end_if;

// The connection is good, if the module states is equal to 4
r04s00_connection_error := (r04s00_module_status_easy <> 4);

// Set the av program input for the fault code
AOI_AV(aoi_r04s00_comm_fault_code, av_r04s00_comm_fault_code);
av_r04s00_comm_fault_code.Program_Input := r04s00_fault_code;

// Set the av program input for the fault info
AOI_AV(aoi_r04s00_comm_fault_info, av_r04s00_comm_fault_info);
av_r04s00_comm_fault_info.Program_Input := r04s00_fault_info;

// Set the comm status dv
AOI_DV(aoi_r04s00_comm_status, dv_r04s00_comm_status);
dv_r04s00_comm_status.Program_Input := NOT r04s00_connection_error AND NOT r04s00_moxa_e1241:I.ConnectionFaulted;

// Channel 0 - ao_chwv_cmd
// Process the AOI
AOI_AO(aoi_r04s00c00, r04s00c00, ao_chwv_cmd);
// Copy the bits from the intermediate DINT to the output unsigned INT to account for Unsigned INT which AB does not do
r04s00_btdt_c00.Source := r04s00c00;
r04s00_btdt_c00.SourceBit := 0;
r04s00_btdt_c00.Length := 16;
r04s00_btdt_c00.DestBit := 0;
r04s00_btdt_c00.Target := zero;
BTDT(r04s00_btdt_c00);
r04s00_moxa_e1241:O.Data[0] := r04s00_btdt_c00.Dest;
 
// Channel 1 - Spare
 
// Channel 2 - Spare
 
// Channel 3 - Spare
 